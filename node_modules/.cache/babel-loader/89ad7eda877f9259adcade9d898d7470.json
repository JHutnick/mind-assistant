{"ast":null,"code":"var _jsxFileName = \"/Users/jhutnick/Documents/github/mind-assistant/src/components/folder/FolderListComponent.js\";\nimport React from 'react';\nimport '../../App.css';\nimport { connect } from \"react-redux\";\nimport userService from \"../../services/userService\";\nimport { findCurrentUser } from \"../../actions/userActions\";\nimport folderService from \"../../services/folderService\";\nimport FolderComponent from \"./FolderComponent\";\nimport { createFolder, deleteFolder, findFoldersForUser } from \"../../actions/folderActions\";\nconst UserService = new userService();\nconst FolderService = new folderService();\n\nclass FolderListComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      newTitle: \"\"\n    };\n\n    this.titleChanged = e => {\n      this.setState({\n        newTitle: e.target.value\n      });\n    };\n\n    this.createFolder = () => {\n      this.props.createFolder(this.props.user.id, {\n        title: this.state.newTitle\n      });\n    };\n\n    this.deleteFolder = id => {\n      this.props.deleteFolder(id);\n    };\n  }\n\n  componentDidMount() {\n    // this.props.findCurrentUser();\n    this.props.findFoldersForUser(this.props.user.id);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: this.titleChanged,\n      className: \"form-control\",\n      placeholder: \"New Folder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.createFolder,\n      className: \"btn btn-primary btn-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Add Folder\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, this.props.children, this.props.folders && this.props.folders.map(folder => React.createElement(\"div\", {\n      key: folder.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(FolderComponent, {\n      folder: folder,\n      deleteFolder: this.deleteFolder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nconst stateToPropertyMapper = state => ({\n  user: state.user.user,\n  folders: state.folders.folders\n});\n\nconst dispatchToPropertyMapper = dispatch => ({\n  findCurrentUser: () => {\n    UserService.findCurrentUser().then(user => {\n      dispatch(findCurrentUser(user));\n    });\n  },\n  findFoldersForUser: userId => {\n    FolderService.findFoldersForUser(userId).then(folders => {\n      dispatch(findFoldersForUser(folders));\n    });\n  },\n  createFolder: (userId, folder) => {\n    FolderService.createFolder(userId, folder).then(folder => {\n      dispatch(createFolder(folder));\n    });\n  },\n  deleteFolder: folderId => {\n    FolderService.deleteFolder(folderId).then(status => {\n      dispatch(deleteFolder(folderId));\n    });\n  }\n});\n\nexport default connect(stateToPropertyMapper, dispatchToPropertyMapper)(FolderListComponent);","map":{"version":3,"sources":["/Users/jhutnick/Documents/github/mind-assistant/src/components/folder/FolderListComponent.js"],"names":["React","connect","userService","findCurrentUser","folderService","FolderComponent","createFolder","deleteFolder","findFoldersForUser","UserService","FolderService","FolderListComponent","Component","state","newTitle","titleChanged","e","setState","target","value","props","user","id","title","componentDidMount","render","children","folders","map","folder","stateToPropertyMapper","dispatchToPropertyMapper","dispatch","then","userId","folderId","status"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../App.css';\nimport {connect} from \"react-redux\";\nimport userService from \"../../services/userService\";\nimport {findCurrentUser} from \"../../actions/userActions\";\nimport folderService from \"../../services/folderService\";\nimport FolderComponent from \"./FolderComponent\";\nimport {createFolder, deleteFolder, findFoldersForUser} from \"../../actions/folderActions\";\n\nconst UserService = new userService();\nconst FolderService = new folderService();\n\nclass FolderListComponent extends React.Component {\n    state = {\n        newTitle: \"\"\n    };\n\n    componentDidMount() {\n        // this.props.findCurrentUser();\n        this.props.findFoldersForUser(this.props.user.id);\n    }\n\n    titleChanged = (e) => {\n        this.setState({\n            newTitle: e.target.value\n        })\n    };\n\n    createFolder = () => {\n        this.props.createFolder(this.props.user.id, {title: this.state.newTitle})\n    };\n\n    deleteFolder = (id) => {\n        this.props.deleteFolder(id)\n    };\n\n    render() {\n        return (\n            <div className={\"container\"}>\n                <div className={\"row\"}>\n                    <input\n                        onChange={this.titleChanged}\n                        className=\"form-control\"\n                        placeholder={\"New Folder\"}\n                    />\n                </div>\n                <div className={\"row\"}>\n                    <button onClick={this.createFolder} className=\"btn btn-primary btn-block\">\n                        Add Folder\n                    </button>\n                </div>\n                <br/>\n                <div className={\"row\"}>\n                    {this.props.children}\n                    {this.props.folders && this.props.folders.map(folder =>\n                        <div key={folder.id}>\n                            <FolderComponent\n                                folder={folder}\n                                deleteFolder={this.deleteFolder}\n                            />\n                        </div>\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n\nconst stateToPropertyMapper = (state) => ({\n    user: state.user.user,\n    folders: state.folders.folders\n});\nconst dispatchToPropertyMapper = (dispatch) => ({\n    findCurrentUser: () => {\n        UserService.findCurrentUser().then(user => {\n            dispatch(findCurrentUser(user))\n        })\n    },\n    findFoldersForUser: (userId) => {\n        FolderService.findFoldersForUser(userId).then(folders => {\n            dispatch(findFoldersForUser(folders))\n        })\n    },\n    createFolder: (userId, folder) => {\n        FolderService.createFolder(userId,folder).then(folder => {\n            dispatch(createFolder(folder))\n        })\n    },\n    deleteFolder: (folderId) => {\n        FolderService.deleteFolder(folderId).then(status => {\n            dispatch(deleteFolder(folderId))\n        })\n    }\n});\nexport default connect(\n    stateToPropertyMapper,\n    dispatchToPropertyMapper\n)(FolderListComponent)\n"]},"metadata":{},"sourceType":"module"}