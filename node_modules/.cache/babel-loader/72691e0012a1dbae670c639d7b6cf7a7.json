{"ast":null,"code":"import { HEROKU_URL } from \"../const/Constants\";\n\nclass noteService {\n  constructor() {\n    this.url = HEROKU_URL + \"/api/notes\";\n\n    this.userURL = userId => `${HEROKU_URL}/api/users/${userId}/notes`;\n\n    this.folderURL = folderId => `${HEROKU_URL}/api/folders/${folderId}/notes`;\n\n    this.findNotesForUser = userId => {\n      return fetch(this.userURL(userId), {\n        method: \"GET\",\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.createNoteForUser = (userId, note) => {\n      return fetch(this.userURL(userId), {\n        method: \"POST\",\n        body: JSON.stringify(note),\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.findNotesForFolder = folderId => {\n      return fetch(this.folderURL(folderId), {\n        method: \"GET\",\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.createNoteForFolder = (folderId, note) => {\n      return fetch(this.folderURL(folderId), {\n        method: \"POST\",\n        body: JSON.stringify(note),\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.updateNote = (noteId, note) => {\n      return fetch(`${this.url}/${noteId}`, {\n        method: \"PUT\",\n        body: JSON.stringify(note),\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.deleteNote = noteId => {\n      return fetch(`${this.url}/${noteId}`, {\n        method: \"DELETE\",\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.findAllNotes = () => {\n      return fetch(this.url, {\n        method: \"GET\",\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.findNoteById = noteId => {\n      return fetch(`${this.url}/${noteId}`, {\n        method: \"GET\",\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n  }\n\n}\n\nexport default noteService;","map":{"version":3,"sources":["/Users/jhutnick/Documents/github/mind-assistant/src/services/noteService.js"],"names":["HEROKU_URL","noteService","url","userURL","userId","folderURL","folderId","findNotesForUser","fetch","method","credentials","then","response","json","createNoteForUser","note","body","JSON","stringify","headers","findNotesForFolder","createNoteForFolder","updateNote","noteId","deleteNote","findAllNotes","findNoteById"],"mappings":"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","sourcesContent":["import {HEROKU_URL} from \"../const/Constants\";\n\nclass noteService {\n    url = HEROKU_URL + \"/api/notes\";\n    userURL = (userId) => `${HEROKU_URL}/api/users/${userId}/notes`;\n    folderURL = (folderId) => `${HEROKU_URL}/api/folders/${folderId}/notes`;\n\n    findNotesForUser = (userId) => {\n        return fetch(this.userURL(userId),{\n            method: \"GET\",\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    createNoteForUser = (userId, note) => {\n        return fetch(this.userURL(userId), {\n            method: \"POST\",\n            body: JSON.stringify(note),\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    findNotesForFolder = (folderId) => {\n        return fetch(this.folderURL(folderId),{\n            method: \"GET\",\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    createNoteForFolder = (folderId, note) => {\n        return fetch(this.folderURL(folderId), {\n            method: \"POST\",\n            body: JSON.stringify(note),\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    updateNote = (noteId, note) => {\n        return fetch(`${this.url}/${noteId}`, {\n            method: \"PUT\",\n            body: JSON.stringify(note),\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    deleteNote = (noteId) => {\n        return fetch(`${this.url}/${noteId}`, {\n            method: \"DELETE\",\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    findAllNotes = () => {\n        return fetch(this.url,{\n            method: \"GET\",\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    findNoteById = (noteId) => {\n        return fetch(`${this.url}/${noteId}`,{\n            method: \"GET\",\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n}\n\nexport default noteService"]},"metadata":{},"sourceType":"module"}