{"ast":null,"code":"import { HEROKU_URL } from \"../const/Constants\";\n\nclass userService {\n  constructor() {\n    this.url = HEROKU_URL + \"/api/users\";\n    this.currentUserUrl = HEROKU_URL + \"/currentUser\";\n    this.logoutUrl = HEROKU_URL + \"/logout\";\n    this.loginUrl = HEROKU_URL + \"/login\";\n\n    this.findUserById = userId => {\n      return fetch(`${this.url}/${userId}`).then(response => response.json());\n    };\n\n    this.findCurrentUser = () => {\n      return fetch(this.currentUserUrl, {\n        method: \"GET\",\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.logoutUser = () => {\n      return fetch(this.logoutUrl, {\n        method: \"POST\",\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.loginUser = user => {\n      return fetch(this.loginUrl, {\n        method: \"POST\",\n        body: JSON.stringify(user),\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.createUser = user => {\n      return fetch(this.url, {\n        method: \"POST\",\n        body: JSON.stringify(user),\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.updateUser = (userId, user) => {\n      return fetch(`${this.url}/${userId}`, {\n        method: \"PUT\",\n        body: JSON.stringify(user),\n        headers: {\n          \"content-type\": \"application/json\"\n        }\n      }).then(response => response.json());\n    };\n\n    this.deleteUser = userId => {\n      return fetch(`${this.url}/${userId}`, {\n        method: \"DELETE\"\n      }).then(response => response.json());\n    };\n\n    this.findAllUsers = () => {\n      return fetch(this.url).then(response => response.json());\n    };\n  }\n\n}\n\nexport default userService;","map":{"version":3,"sources":["/Users/jhutnick/Documents/github/mind-assistant/src/services/userService.js"],"names":["HEROKU_URL","userService","url","currentUserUrl","logoutUrl","loginUrl","findUserById","userId","fetch","then","response","json","findCurrentUser","method","credentials","logoutUser","loginUser","user","body","JSON","stringify","headers","createUser","updateUser","deleteUser","findAllUsers"],"mappings":"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","sourcesContent":["import {HEROKU_URL} from \"../const/Constants\";\n\nclass userService {\n    url = HEROKU_URL + \"/api/users\";\n    currentUserUrl = HEROKU_URL + \"/currentUser\";\n    logoutUrl = HEROKU_URL + \"/logout\";\n    loginUrl = HEROKU_URL + \"/login\";\n\n    findUserById = (userId) => {\n        return fetch(`${this.url}/${userId}`).then(response => response.json())\n    };\n\n    findCurrentUser = () => {\n        return fetch(this.currentUserUrl, {\n            method: \"GET\",\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    logoutUser = () => {\n        return fetch(this.logoutUrl, {\n            method: \"POST\",\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    loginUser = (user) => {\n        return fetch(this.loginUrl, {\n            method: \"POST\",\n            body: JSON.stringify(user),\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    createUser = (user) => {\n        return fetch(this.url, {\n            method: \"POST\",\n            body: JSON.stringify(user),\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    updateUser = (userId, user) => {\n        return fetch(`${this.url}/${userId}`, {\n            method: \"PUT\",\n            body: JSON.stringify(user),\n            headers: {\n                \"content-type\": \"application/json\"\n            }\n        }).then(response => response.json())\n    };\n\n    deleteUser = (userId) => {\n        return fetch(`${this.url}/${userId}`, {\n            method: \"DELETE\"\n        }).then(response => response.json())\n    };\n\n    findAllUsers = () => {\n        return fetch(this.url).then(response => response.json())\n    };\n}\n\nexport default userService"]},"metadata":{},"sourceType":"module"}