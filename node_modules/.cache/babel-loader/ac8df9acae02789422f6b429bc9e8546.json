{"ast":null,"code":"import { HEROKU_URL } from \"../const/Constants\";\n\nclass labelService {\n  constructor() {\n    this.url = HEROKU_URL + \"/api/labels\";\n\n    this.userURL = userId => `${HEROKU_URL}/api/users/${userId}/labels`;\n\n    this.folderURL = folderId => `${HEROKU_URL}/api/folders/${folderId}/labels`;\n\n    this.findLabelsForUser = userId => {\n      return fetch(this.userURL(userId), {\n        method: \"GET\",\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.createLabelForUser = (userId, label) => {\n      return fetch(this.userURL(userId), {\n        method: \"POST\",\n        body: JSON.stringify(label),\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.findLabelsForFolder = folderId => {\n      return fetch(this.folderURL(folderId), {\n        method: \"GET\",\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.createLabelForFolder = (folderId, label) => {\n      return fetch(this.folderURL(folderId), {\n        method: \"POST\",\n        body: JSON.stringify(label),\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.updateLabel = (labelId, label) => {\n      return fetch(`${this.url}/${labelId}`, {\n        method: \"PUT\",\n        body: JSON.stringify(label),\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.deleteLabel = labelId => {\n      return fetch(`${this.url}/${labelId}`, {\n        method: \"DELETE\",\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.findAllLabels = () => {\n      return fetch(this.url, {\n        method: \"GET\",\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.findLabelById = labelId => {\n      return fetch(`${this.url}/${labelId}`, {\n        method: \"GET\",\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n  }\n\n}\n\nexport default labelService;","map":{"version":3,"sources":["/Users/jhutnick/Documents/github/mind-assistant/src/services/labelService.js"],"names":["HEROKU_URL","labelService","url","userURL","userId","folderURL","folderId","findLabelsForUser","fetch","method","credentials","then","response","json","createLabelForUser","label","body","JSON","stringify","headers","findLabelsForFolder","createLabelForFolder","updateLabel","labelId","deleteLabel","findAllLabels","findLabelById"],"mappings":"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","sourcesContent":["import {HEROKU_URL} from \"../const/Constants\";\n\nclass labelService {\n    url = HEROKU_URL + \"/api/labels\";\n    userURL = (userId) => `${HEROKU_URL}/api/users/${userId}/labels`;\n    folderURL = (folderId) => `${HEROKU_URL}/api/folders/${folderId}/labels`;\n\n    findLabelsForUser = (userId) => {\n        return fetch(this.userURL(userId),{\n            method: \"GET\",\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    createLabelForUser = (userId, label) => {\n        return fetch(this.userURL(userId), {\n            method: \"POST\",\n            body: JSON.stringify(label),\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    findLabelsForFolder = (folderId) => {\n        return fetch(this.folderURL(folderId),{\n            method: \"GET\",\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    createLabelForFolder = (folderId, label) => {\n        return fetch(this.folderURL(folderId), {\n            method: \"POST\",\n            body: JSON.stringify(label),\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    updateLabel = (labelId, label) => {\n        return fetch(`${this.url}/${labelId}`, {\n            method: \"PUT\",\n            body: JSON.stringify(label),\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    deleteLabel = (labelId) => {\n        return fetch(`${this.url}/${labelId}`, {\n            method: \"DELETE\",\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    findAllLabels = () => {\n        return fetch(this.url,{\n            method: \"GET\",\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    findLabelById = (labelId) => {\n        return fetch(`${this.url}/${labelId}`,{\n            method: \"GET\",\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n}\n\nexport default labelService"]},"metadata":{},"sourceType":"module"}