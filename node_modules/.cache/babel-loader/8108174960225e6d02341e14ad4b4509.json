{"ast":null,"code":"var _jsxFileName = \"/Users/jhutnick/Documents/github/mind-assistant/src/components/note/NoteListComponent.js\";\nimport React from 'react';\nimport NoteComponent from './NoteComponent';\nimport '../../App.css';\nimport { findCurrentUser } from \"../../actions/userActions\";\nimport { createNote, deleteNote, findNotesForGroup } from \"../../actions/noteActions\";\nimport { connect } from \"react-redux\";\nimport userService from \"../../services/userService\";\nimport noteService from \"../../services/noteService\";\nimport NewNoteComponent from \"./NewNoteComponent\";\nconst UserService = new userService();\nconst NoteService = new noteService();\n\nclass NoteListComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.createUserNote = note => {\n      this.props.createNoteForUser(this.props.user.id, note);\n    };\n\n    this.createFolderNote = note => {\n      const folderId = this.props.folder.id;\n      this.props.createNoteForFolder(folderId, note);\n    };\n\n    this.deleteNote = id => {\n      this.props.deleteNote(id);\n    };\n  }\n\n  // state = {\n  //     user: {}\n  // };\n  // const initialState = {\n  //     user: {}\n  // }\n  //TODO:\n  //Figure out why the current user doesn't load on mount\n  //Add functionality to determine if user or folder should be created\n  componentDidMount() {\n    // this.props.findCurrentUser();\n    console.log(this.props.user.id); // this.props.findNotesForUser(this.props.user.id);\n    // this.props.findNotesForUser(102);\n\n    console.log(this.props.user); // console.log(this.props.notes);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.user !== prevState.user) {\n      // console.log(this.props.user);\n      // console.log(this.props.notes);\n      this.setState({\n        user: this.props.user\n      }); // this.props.findNotesForUser(this.props.user.id);\n    }\n  }\n\n  render() {\n    return React.createElement(\"ul\", {\n      className: \"list-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      className: \"list-group-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(NewNoteComponent, {\n      createUserNote: this.createUserNote,\n      createFolderNote: this.createFolderNote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), this.props.notes && this.props.notes.map(note => React.createElement(\"div\", {\n      key: note.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(NoteComponent, {\n      deleteNote: this.deleteNote,\n      note: note,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst stateToPropertyMapper = state => ({\n  user: state.user.user,\n  notes: state.notes.notes\n});\n\nconst dispatchToPropertyMapper = dispatch => ({\n  findCurrentUser: () => {\n    UserService.findCurrentUser().then(user => {\n      dispatch(findCurrentUser(user));\n    });\n  },\n  findNotesForUser: userId => {\n    NoteService.findNotesForUser(userId).then(notes => {\n      dispatch(findNotesForGroup(notes));\n    });\n  },\n  createNoteForUser: (userId, note) => {\n    NoteService.createNoteForUser(userId, note).then(note => {\n      dispatch(createNote(note));\n    });\n  },\n  findNotesForFolder: folderId => {\n    NoteService.findNotesForFolder(folderId).then(notes => {\n      dispatch(findNotesForGroup(notes));\n    });\n  },\n  createNoteForFolder: (folderId, note) => {\n    NoteService.createNoteForFolder(folderId, note).then(note => {\n      dispatch(createNote(note));\n    });\n  },\n  deleteNote: noteId => {\n    NoteService.deleteNote(noteId).then(status => {\n      dispatch(deleteNote(noteId));\n    });\n  }\n});\n\nexport default connect(stateToPropertyMapper, dispatchToPropertyMapper)(NoteListComponent);","map":{"version":3,"sources":["/Users/jhutnick/Documents/github/mind-assistant/src/components/note/NoteListComponent.js"],"names":["React","NoteComponent","findCurrentUser","createNote","deleteNote","findNotesForGroup","connect","userService","noteService","NewNoteComponent","UserService","NoteService","NoteListComponent","Component","createUserNote","note","props","createNoteForUser","user","id","createFolderNote","folderId","folder","createNoteForFolder","componentDidMount","console","log","componentDidUpdate","prevProps","prevState","snapshot","setState","render","notes","map","stateToPropertyMapper","state","dispatchToPropertyMapper","dispatch","then","findNotesForUser","userId","findNotesForFolder","noteId","status"],"mappings":"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","sourcesContent":["import React from 'react';\nimport NoteComponent from './NoteComponent';\nimport '../../App.css';\nimport {findCurrentUser} from \"../../actions/userActions\";\nimport {createNote, deleteNote, findNotesForGroup} from \"../../actions/noteActions\";\nimport {connect} from \"react-redux\";\nimport userService from \"../../services/userService\";\nimport noteService from \"../../services/noteService\";\nimport NewNoteComponent from \"./NewNoteComponent\";\n\nconst UserService = new userService();\nconst NoteService = new noteService();\n\nclass NoteListComponent extends React.Component {\n    // state = {\n    //     user: {}\n    // };\n    // const initialState = {\n    //     user: {}\n    // }\n\n    //TODO:\n    //Figure out why the current user doesn't load on mount\n    //Add functionality to determine if user or folder should be created\n\n    componentDidMount() {\n        // this.props.findCurrentUser();\n        console.log(this.props.user.id);\n        // this.props.findNotesForUser(this.props.user.id);\n        // this.props.findNotesForUser(102);\n        console.log(this.props.user);\n        // console.log(this.props.notes);\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.props.user !== prevState.user){\n            // console.log(this.props.user);\n            // console.log(this.props.notes);\n            this.setState({\n                user: this.props.user\n            });\n            // this.props.findNotesForUser(this.props.user.id);\n        }\n    }\n\n    createUserNote= (note) => {\n        this.props.createNoteForUser(this.props.user.id, note)\n    };\n\n    //TODO:\n    //Figure out how to access folder id\n    //Below information is a placeholder and not accurate\n    createFolderNote= (note) => {\n        const folderId = this.props.folder.id;\n        this.props.createNoteForFolder(folderId, note)\n    };\n\n    deleteNote = (id) => {\n        this.props.deleteNote(id)\n    };\n\n    render() {\n        return (\n            <ul className=\"list-group\">\n                <li className=\"list-group-item\">\n                    <NewNoteComponent\n                        createUserNote={this.createUserNote}\n                        createFolderNote={this.createFolderNote}\n                    />\n                </li>\n                <br/>\n                {this.props.notes && this.props.notes.map(note =>\n                    <div key={note.id}>\n                        <NoteComponent\n                            deleteNote={this.deleteNote}\n                            note={note}\n                        />\n                        <br/>\n                    </div>\n                )}\n            </ul>\n        )\n    }\n}\n\nconst stateToPropertyMapper = (state) => ({\n    user: state.user.user,\n    notes: state.notes.notes\n});\nconst dispatchToPropertyMapper = (dispatch) => ({\n    findCurrentUser: () => {\n        UserService.findCurrentUser().then(user => {\n            dispatch(findCurrentUser(user))\n        })\n    },\n    findNotesForUser: (userId) => {\n        NoteService.findNotesForUser(userId).then(notes => {\n            dispatch(findNotesForGroup(notes))\n        })\n    },\n    createNoteForUser: (userId, note) => {\n        NoteService.createNoteForUser(userId,note).then(note => {\n            dispatch(createNote(note))\n        })\n    },\n    findNotesForFolder: (folderId) => {\n        NoteService.findNotesForFolder(folderId).then(notes => {\n            dispatch(findNotesForGroup(notes))\n        })\n    },\n    createNoteForFolder: (folderId, note) => {\n        NoteService.createNoteForFolder(folderId,note).then(note => {\n            dispatch(createNote(note))\n        })\n    },\n    deleteNote: (noteId) => {\n        NoteService.deleteNote(noteId).then(status => {\n            dispatch(deleteNote(noteId))\n        })\n    }\n});\nexport default connect(\n    stateToPropertyMapper,\n    dispatchToPropertyMapper\n)(NoteListComponent)\n"]},"metadata":{},"sourceType":"module"}