{"ast":null,"code":"import { HEROKU_URL } from \"../const/Constants\";\n\nclass userService {\n  constructor() {\n    this.url = HEROKU_URL + \"/api/users\";\n    this.currentUserUrl = HEROKU_URL + \"/currentUser\";\n    this.logoutUrl = HEROKU_URL + \"/logout\";\n    this.loginUrl = HEROKU_URL + \"/login\";\n\n    this.findUserById = userId => {\n      return fetch(`${this.url}/${userId}`, {\n        method: \"GET\",\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.findCurrentUser = () => {\n      return fetch(this.currentUserUrl, {\n        method: \"GET\",\n        credentials: \"include\"\n      }).then(response => response.json()).catch(err => {\n        console.log(err);\n        return {\n          username: 'login',\n          fname: 'anonymous',\n          role: 'general'\n        };\n      });\n    };\n\n    this.logoutUser = () => {\n      return fetch(this.logoutUrl, {\n        method: \"POST\",\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.loginUser = user => {\n      return fetch(this.loginUrl, {\n        method: \"POST\",\n        body: JSON.stringify(user),\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.createUser = user => {\n      return fetch(this.url, {\n        method: \"POST\",\n        body: JSON.stringify(user),\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        credentials: \"include\"\n      }).then(response => {\n        console.log(response.headers);\n        return response.json();\n      });\n    };\n\n    this.updateUser = (userId, user) => {\n      return fetch(`${this.url}/${userId}`, {\n        method: \"PUT\",\n        body: JSON.stringify(user),\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.deleteUser = userId => {\n      return fetch(`${this.url}/${userId}`, {\n        method: \"DELETE\",\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.findAllUsers = () => {\n      return fetch(this.url, {\n        method: \"GET\",\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n  }\n\n}\n\nexport default userService;","map":{"version":3,"sources":["/Users/jhutnick/Documents/github/mind-assistant/src/services/userService.js"],"names":["HEROKU_URL","userService","url","currentUserUrl","logoutUrl","loginUrl","findUserById","userId","fetch","method","credentials","then","response","json","findCurrentUser","catch","err","console","log","username","fname","role","logoutUser","loginUser","user","body","JSON","stringify","headers","createUser","updateUser","deleteUser","findAllUsers"],"mappings":"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","sourcesContent":["import {HEROKU_URL} from \"../const/Constants\";\n\nclass userService {\n    url = HEROKU_URL + \"/api/users\";\n    currentUserUrl = HEROKU_URL + \"/currentUser\";\n    logoutUrl = HEROKU_URL + \"/logout\";\n    loginUrl = HEROKU_URL + \"/login\";\n\n    findUserById = (userId) => {\n        return fetch(`${this.url}/${userId}`,{\n            method: \"GET\",\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    findCurrentUser = () => {\n        return fetch(this.currentUserUrl, {\n            method: \"GET\",\n            credentials: \"include\"\n        }).then(response => response.json())\n            .catch(err => {console.log(err); return {\n                username: 'login',\n            fname: 'anonymous',\n                role: 'general'\n            }});\n    };\n\n    logoutUser = () => {\n        return fetch(this.logoutUrl, {\n            method: \"POST\",\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    loginUser = (user) => {\n        return fetch(this.loginUrl, {\n            method: \"POST\",\n            body: JSON.stringify(user),\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    createUser = (user) => {\n        return fetch(this.url, {\n            method: \"POST\",\n            body: JSON.stringify(user),\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            credentials: \"include\"\n        }).then(response => {\n            console.log(response.headers);\n            return response.json()\n        })\n    };\n\n    updateUser = (userId, user) => {\n        return fetch(`${this.url}/${userId}`, {\n            method: \"PUT\",\n            body: JSON.stringify(user),\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    deleteUser = (userId) => {\n        return fetch(`${this.url}/${userId}`, {\n            method: \"DELETE\",\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    findAllUsers = () => {\n        return fetch(this.url,{\n            method: \"GET\",\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n}\n\nexport default userService\n"]},"metadata":{},"sourceType":"module"}