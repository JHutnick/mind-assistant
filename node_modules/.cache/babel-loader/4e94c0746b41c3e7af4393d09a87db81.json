{"ast":null,"code":"var _jsxFileName = \"/home/davischandram/webdev/cs5610/mind-assistant/src/components/note/NoteListComponent.js\";\nimport React from 'react';\nimport NoteComponent from './NoteComponent';\nimport '../../App.css';\nimport { findCurrentUser } from \"../../actions/userActions\";\nimport { createNote, deleteNote, findNotesForGroup } from \"../../actions/noteActions\";\nimport { connect } from \"react-redux\";\nimport userService from \"../../services/userService\";\nimport noteService from \"../../services/noteService\";\nconst UserService = new userService();\nconst NoteService = new noteService();\n\nclass NoteListComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      newTitle: \"New Note\",\n      newText: \"Note Body\",\n      notes: [{\n        id: 123,\n        title: \"Note 1\",\n        text: 'wow'\n      }, {\n        id: 124,\n        title: \"Note 2\",\n        text: 'wow cool'\n      }, {\n        id: 125,\n        title: \"Note 3\",\n        text: 'wow this'\n      }],\n      label: {\n        id: -1,\n        title: 'New Label'\n      },\n      labels: [{\n        id: 123,\n        title: \"Label 1\"\n      }, {\n        id: 124,\n        title: \"Label 2\"\n      }, {\n        id: 125,\n        title: \"Label 3\"\n      }]\n    };\n\n    this.createUserNote = () => {\n      const note = {\n        title: this.state.newTitle,\n        text: this.state.newText\n      };\n      this.props.createNoteForUser(this.props.user.id, note);\n    };\n\n    this.titleChanged = e => {\n      this.setState({\n        newTitle: e.target.value\n      });\n    };\n\n    this.textChanged = e => {\n      this.setState({\n        newText: e.target.value\n      });\n    };\n\n    this.deleteNote = id => {\n      this.props.deleteNote(id);\n    };\n  }\n\n  componentDidMount() {\n    this.props.findCurrentUser(); // this.props.findNotesForUser(this.props.user.id);\n\n    this.props.findNotesForUser(102); // console.log(this.props.user);\n    // console.log(this.props.notes);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.user !== prevState.user) {\n      // console.log(this.props.user);\n      // console.log(this.props.notes);\n      this.setState({\n        user: this.props.user\n      });\n      this.props.findNotesForUser(this.props.user.id);\n    }\n  }\n\n  render() {\n    return React.createElement(\"ul\", {\n      className: \"list-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      className: \"list-group-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.createUserNote,\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Add Note\")), this.props.notes.map(note => React.createElement(\"div\", {\n      key: note.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(NoteComponent, {\n      deleteNote: this.deleteNote,\n      titleChange: this.titleChanged,\n      textChange: this.textChanged,\n      note: note,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst stateToPropertyMapper = state => ({\n  user: state.user.user,\n  notes: state.notes.notes\n});\n\nconst dispatchToPropertyMapper = dispatch => ({\n  findCurrentUser: () => {\n    UserService.findCurrentUser().then(user => {\n      dispatch(findCurrentUser(user));\n    });\n  },\n  findNotesForUser: userId => {\n    NoteService.findNotesForUser(userId).then(notes => {\n      dispatch(findNotesForGroup(notes));\n    });\n  },\n  createNoteForUser: (userId, note) => {\n    NoteService.createNoteForUser(userId, note).then(note => {\n      dispatch(createNote(note));\n    });\n  },\n  findNotesForFolder: folderId => {\n    NoteService.findNotesForFolder(folderId).then(notes => {\n      dispatch(findNotesForGroup(notes));\n    });\n  },\n  createNoteForFolder: (folderId, note) => {\n    NoteService.createNoteForFolder(folderId, note).then(note => {\n      dispatch(createNote(note));\n    });\n  },\n  deleteNote: noteId => {\n    NoteService.deleteNote(noteId).then(status => {\n      dispatch(deleteNote(noteId));\n    });\n  }\n});\n\nexport default connect(stateToPropertyMapper, dispatchToPropertyMapper)(NoteListComponent);","map":{"version":3,"sources":["/home/davischandram/webdev/cs5610/mind-assistant/src/components/note/NoteListComponent.js"],"names":["React","NoteComponent","findCurrentUser","createNote","deleteNote","findNotesForGroup","connect","userService","noteService","UserService","NoteService","NoteListComponent","Component","state","newTitle","newText","notes","id","title","text","label","labels","createUserNote","note","props","createNoteForUser","user","titleChanged","e","setState","target","value","textChanged","componentDidMount","findNotesForUser","componentDidUpdate","prevProps","prevState","snapshot","render","map","stateToPropertyMapper","dispatchToPropertyMapper","dispatch","then","userId","findNotesForFolder","folderId","createNoteForFolder","noteId","status"],"mappings":"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","sourcesContent":["import React from 'react';\nimport NoteComponent from './NoteComponent';\nimport '../../App.css';\nimport {findCurrentUser} from \"../../actions/userActions\";\nimport {createNote, deleteNote, findNotesForGroup} from \"../../actions/noteActions\";\nimport {connect} from \"react-redux\";\nimport userService from \"../../services/userService\";\nimport noteService from \"../../services/noteService\";\n\nconst UserService = new userService();\nconst NoteService = new noteService();\n\nclass NoteListComponent extends React.Component {\n    state = {\n        newTitle: \"New Note\",\n        newText: \"Note Body\",\n        notes: [\n            {id: 123, title: \"Note 1\", text: 'wow'},\n            {id: 124, title: \"Note 2\", text: 'wow cool'},\n            {id: 125, title: \"Note 3\", text: 'wow this'}\n        ],\n        label: {\n            id: -1,\n            title: 'New Label'\n        },\n        labels: [\n            {id: 123, title: \"Label 1\"},\n            {id: 124, title: \"Label 2\"},\n            {id: 125, title: \"Label 3\"}\n        ],\n    };\n\n    componentDidMount() {\n        this.props.findCurrentUser();\n        // this.props.findNotesForUser(this.props.user.id);\n        this.props.findNotesForUser(102);\n        // console.log(this.props.user);\n        // console.log(this.props.notes);\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.props.user !== prevState.user){\n            // console.log(this.props.user);\n            // console.log(this.props.notes);\n            this.setState({\n                user: this.props.user\n            });\n            this.props.findNotesForUser(this.props.user.id);\n        }\n    }\n\n    createUserNote= () => {\n        const note = {\n            title: this.state.newTitle,\n            text: this.state.newText\n        };\n        this.props.createNoteForUser(this.props.user.id, note)\n    };\n\n    titleChanged = (e) => {\n        this.setState({\n            newTitle: e.target.value\n        })\n    };\n\n    textChanged = (e) => {\n        this.setState({\n            newText: e.target.value\n        })\n    };\n\n    deleteNote = (id) => {\n        this.props.deleteNote(id)\n    };\n\n    render() {\n        return (\n            <ul className=\"list-group\">\n                <li className=\"list-group-item\">\n                    <button onClick={this.createUserNote} className=\"btn btn-primary\">\n                        Add Note\n                    </button>\n                </li>\n                {this.props.notes.map(note =>\n                    <div key={note.id}>\n                        <NoteComponent\n                            deleteNote={this.deleteNote}\n                            titleChange={this.titleChanged}\n                            textChange={this.textChanged}\n                            note={note}\n                        />\n                    </div>\n                )}\n            </ul>\n        )\n    }\n}\n\nconst stateToPropertyMapper = (state) => ({\n    user: state.user.user,\n    notes: state.notes.notes\n});\nconst dispatchToPropertyMapper = (dispatch) => ({\n    findCurrentUser: () => {\n        UserService.findCurrentUser().then(user => {\n            dispatch(findCurrentUser(user))\n        })\n    },\n    findNotesForUser: (userId) => {\n        NoteService.findNotesForUser(userId).then(notes => {\n            dispatch(findNotesForGroup(notes))\n        })\n    },\n    createNoteForUser: (userId, note) => {\n        NoteService.createNoteForUser(userId,note).then(note => {\n            dispatch(createNote(note))\n        })\n    },\n    findNotesForFolder: (folderId) => {\n        NoteService.findNotesForFolder(folderId).then(notes => {\n            dispatch(findNotesForGroup(notes))\n        })\n    },\n    createNoteForFolder: (folderId, note) => {\n        NoteService.createNoteForFolder(folderId,note).then(note => {\n            dispatch(createNote(note))\n        })\n    },\n    deleteNote: (noteId) => {\n        NoteService.deleteNote(noteId).then(status => {\n            dispatch(deleteNote(noteId))\n        })\n    }\n});\nexport default connect(\n    stateToPropertyMapper,\n    dispatchToPropertyMapper\n)(NoteListComponent)"]},"metadata":{},"sourceType":"module"}