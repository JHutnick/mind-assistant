{"ast":null,"code":"import { HEROKU_URL } from \"../const/Constants\";\n\nclass folderService {\n  constructor() {\n    this.url = HEROKU_URL + \"/api/folders\";\n\n    this.userURL = userId => `${HEROKU_URL}/api/users/${userId}/folders`;\n\n    this.findFoldersForUser = userId => {\n      console.log(this.userURL(userId));\n      return fetch(this.userURL(userId), {\n        method: \"GET\",\n        credentials: \"include\"\n      }).then(response => {\n        console.log(response);\n        return response.json();\n      });\n    };\n\n    this.createFolder = (userId, folder) => {\n      return fetch(this.userURL(userId), {\n        method: \"POST\",\n        body: JSON.stringify(folder),\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.updateFolder = (folderId, folder) => {\n      return fetch(`${this.url}/${folderId}`, {\n        method: \"PUT\",\n        body: JSON.stringify(folder),\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.deleteFolder = folderId => {\n      return fetch(`${this.url}/${folderId}`, {\n        method: \"DELETE\",\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.findAllFolders = () => {\n      return fetch(this.url, {\n        method: \"GET\",\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n\n    this.findFolderById = folderId => {\n      return fetch(`${this.url}/${folderId}`, {\n        method: \"GET\",\n        credentials: \"include\"\n      }).then(response => response.json());\n    };\n  }\n\n}\n\nexport default folderService;","map":{"version":3,"sources":["/home/davischandram/webdev/cs5610/mind-assistant/src/services/folderService.js"],"names":["HEROKU_URL","folderService","url","userURL","userId","findFoldersForUser","console","log","fetch","method","credentials","then","response","json","createFolder","folder","body","JSON","stringify","headers","updateFolder","folderId","deleteFolder","findAllFolders","findFolderById"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,oBAAzB;;AAEA,MAAMC,aAAN,CAAoB;AAAA;AAAA,SAChBC,GADgB,GACVF,UAAU,GAAG,cADH;;AAAA,SAEhBG,OAFgB,GAELC,MAAD,IAAa,GAAEJ,UAAW,cAAaI,MAAO,UAFxC;;AAAA,SAIhBC,kBAJgB,GAIMD,MAAD,IAAY;AAC7BE,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,OAAL,CAAaC,MAAb,CAAZ;AACA,aAAOI,KAAK,CAAC,KAAKL,OAAL,CAAaC,MAAb,CAAD,EAAsB;AAC9BK,QAAAA,MAAM,EAAE,KADsB;AAE9BC,QAAAA,WAAW,EAAE;AAFiB,OAAtB,CAAL,CAGJC,IAHI,CAGCC,QAAQ,IAAI;AAChBN,QAAAA,OAAO,CAACC,GAAR,CAAYK,QAAZ;AACA,eAAOA,QAAQ,CAACC,IAAT,EAAP;AAAuB,OALpB,CAAP;AAMH,KAZe;;AAAA,SAchBC,YAdgB,GAcD,CAACV,MAAD,EAASW,MAAT,KAAoB;AAC/B,aAAOP,KAAK,CAAC,KAAKL,OAAL,CAAaC,MAAb,CAAD,EAAuB;AAC/BK,QAAAA,MAAM,EAAE,MADuB;AAE/BO,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,MAAf,CAFyB;AAG/BI,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAHsB;AAM/BT,QAAAA,WAAW,EAAE;AANkB,OAAvB,CAAL,CAOJC,IAPI,CAOCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPb,CAAP;AAQH,KAvBe;;AAAA,SAyBhBO,YAzBgB,GAyBD,CAACC,QAAD,EAAWN,MAAX,KAAsB;AACjC,aAAOP,KAAK,CAAE,GAAE,KAAKN,GAAI,IAAGmB,QAAS,EAAzB,EAA4B;AACpCZ,QAAAA,MAAM,EAAE,KAD4B;AAEpCO,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,MAAf,CAF8B;AAGpCI,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAH2B;AAMpCT,QAAAA,WAAW,EAAE;AANuB,OAA5B,CAAL,CAOJC,IAPI,CAOCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPb,CAAP;AAQH,KAlCe;;AAAA,SAoChBS,YApCgB,GAoCAD,QAAD,IAAc;AACzB,aAAOb,KAAK,CAAE,GAAE,KAAKN,GAAI,IAAGmB,QAAS,EAAzB,EAA4B;AACpCZ,QAAAA,MAAM,EAAE,QAD4B;AAEpCC,QAAAA,WAAW,EAAE;AAFuB,OAA5B,CAAL,CAGJC,IAHI,CAGCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHb,CAAP;AAIH,KAzCe;;AAAA,SA2ChBU,cA3CgB,GA2CC,MAAM;AACnB,aAAOf,KAAK,CAAC,KAAKN,GAAN,EAAU;AAClBO,QAAAA,MAAM,EAAE,KADU;AAElBC,QAAAA,WAAW,EAAE;AAFK,OAAV,CAAL,CAGJC,IAHI,CAGCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHb,CAAP;AAIH,KAhDe;;AAAA,SAkDhBW,cAlDgB,GAkDEH,QAAD,IAAc;AAC3B,aAAOb,KAAK,CAAE,GAAE,KAAKN,GAAI,IAAGmB,QAAS,EAAzB,EAA2B;AACnCZ,QAAAA,MAAM,EAAE,KAD2B;AAEnCC,QAAAA,WAAW,EAAE;AAFsB,OAA3B,CAAL,CAGJC,IAHI,CAGCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHb,CAAP;AAIH,KAvDe;AAAA;;AAAA;;AA0DpB,eAAeZ,aAAf","sourcesContent":["import {HEROKU_URL} from \"../const/Constants\";\n\nclass folderService {\n    url = HEROKU_URL + \"/api/folders\";\n    userURL = (userId) => `${HEROKU_URL}/api/users/${userId}/folders`;\n\n    findFoldersForUser = (userId) => {\n        console.log(this.userURL(userId));\n        return fetch(this.userURL(userId),{\n            method: \"GET\",\n            credentials: \"include\"\n        }).then(response => {\n            console.log(response);\n            return response.json()})\n    };\n\n    createFolder = (userId, folder) => {\n        return fetch(this.userURL(userId), {\n            method: \"POST\",\n            body: JSON.stringify(folder),\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    updateFolder = (folderId, folder) => {\n        return fetch(`${this.url}/${folderId}`, {\n            method: \"PUT\",\n            body: JSON.stringify(folder),\n            headers: {\n                \"content-type\": \"application/json\"\n            },\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    deleteFolder = (folderId) => {\n        return fetch(`${this.url}/${folderId}`, {\n            method: \"DELETE\",\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    findAllFolders = () => {\n        return fetch(this.url,{\n            method: \"GET\",\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n\n    findFolderById = (folderId) => {\n        return fetch(`${this.url}/${folderId}`,{\n            method: \"GET\",\n            credentials: \"include\"\n        }).then(response => response.json())\n    };\n}\n\nexport default folderService"]},"metadata":{},"sourceType":"module"}