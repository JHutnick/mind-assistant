{"ast":null,"code":"var _jsxFileName = \"/Users/jhutnick/Documents/github/mind-assistant/src/components/note/NoteListComponent.js\";\nimport React from 'react';\nimport NoteComponent from './NoteComponent';\nimport '../../App.css';\nimport { findCurrentUser } from \"../../actions/userActions\";\nimport { createNote, deleteNote, findNotesForGroup } from \"../../actions/noteActions\";\nimport { connect } from \"react-redux\";\nimport userService from \"../../services/userService\";\nimport noteService from \"../../services/noteService\";\nimport NewNoteComponent from \"./NewNoteComponent\";\nconst UserService = new userService();\nconst NoteService = new noteService();\nconst initialState = {\n  user: {}\n};\n\nclass NoteListComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: {}\n    };\n\n    this.createUserNote = note => {\n      this.props.createNoteForUser(this.props.user.id, note);\n    };\n\n    this.createFolderNote = note => {\n      const folderId = this.props.folder.id;\n      this.props.createNoteForFolder(folderId, note);\n    };\n\n    this.deleteNote = id => {\n      this.props.deleteNote(id);\n    };\n  }\n\n  //TODO:\n  //Figure out why the current user doesn't load on mount\n  //Add functionality to determine if user or folder should be created\n  componentDidMount() {\n    // this.props.findCurrentUser();\n    console.log(this.props.user.id); // this.props.findNotesForUser(this.props.user.id);\n\n    console.log(this.props.findNotesForUser(this.initialState.user.id)); // this.props.findNotesForUser(102);\n\n    console.log(this.props.user); // console.log(this.props.notes);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.user !== prevState.user) {\n      // console.log(this.props.user);\n      // console.log(this.props.notes);\n      this.setState({\n        user: this.props.user\n      }); // this.props.findNotesForUser(this.props.user.id);\n    }\n  }\n\n  render() {\n    return React.createElement(\"ul\", {\n      className: \"list-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      className: \"list-group-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(NewNoteComponent, {\n      createUserNote: this.createUserNote,\n      createFolderNote: this.createFolderNote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), this.props.notes && this.props.notes.map(note => React.createElement(\"div\", {\n      key: note.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(NoteComponent, {\n      deleteNote: this.deleteNote,\n      note: note,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst stateToPropertyMapper = state => ({\n  user: state.user.user,\n  notes: state.notes.notes\n});\n\nconst dispatchToPropertyMapper = dispatch => ({\n  findCurrentUser: () => {\n    UserService.findCurrentUser().then(user => {\n      dispatch(findCurrentUser(user));\n    });\n  },\n  findNotesForUser: userId => {\n    NoteService.findNotesForUser(userId).then(notes => {\n      dispatch(findNotesForGroup(notes));\n    });\n  },\n  createNoteForUser: (userId, note) => {\n    NoteService.createNoteForUser(userId, note).then(note => {\n      dispatch(createNote(note));\n    });\n  },\n  findNotesForFolder: folderId => {\n    NoteService.findNotesForFolder(folderId).then(notes => {\n      dispatch(findNotesForGroup(notes));\n    });\n  },\n  createNoteForFolder: (folderId, note) => {\n    NoteService.createNoteForFolder(folderId, note).then(note => {\n      dispatch(createNote(note));\n    });\n  },\n  deleteNote: noteId => {\n    NoteService.deleteNote(noteId).then(status => {\n      dispatch(deleteNote(noteId));\n    });\n  }\n});\n\nexport default connect(stateToPropertyMapper, dispatchToPropertyMapper)(NoteListComponent);","map":{"version":3,"sources":["/Users/jhutnick/Documents/github/mind-assistant/src/components/note/NoteListComponent.js"],"names":["React","NoteComponent","findCurrentUser","createNote","deleteNote","findNotesForGroup","connect","userService","noteService","NewNoteComponent","UserService","NoteService","initialState","user","NoteListComponent","Component","state","createUserNote","note","props","createNoteForUser","id","createFolderNote","folderId","folder","createNoteForFolder","componentDidMount","console","log","findNotesForUser","componentDidUpdate","prevProps","prevState","snapshot","setState","render","notes","map","stateToPropertyMapper","dispatchToPropertyMapper","dispatch","then","userId","findNotesForFolder","noteId","status"],"mappings":"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","sourcesContent":["import React from 'react';\nimport NoteComponent from './NoteComponent';\nimport '../../App.css';\nimport {findCurrentUser} from \"../../actions/userActions\";\nimport {createNote, deleteNote, findNotesForGroup} from \"../../actions/noteActions\";\nimport {connect} from \"react-redux\";\nimport userService from \"../../services/userService\";\nimport noteService from \"../../services/noteService\";\nimport NewNoteComponent from \"./NewNoteComponent\";\n\nconst UserService = new userService();\nconst NoteService = new noteService();\n\nconst initialState = {\n    user: {}\n}\nclass NoteListComponent extends React.Component {\n    state = {\n        user: {}\n    };\n\n    //TODO:\n    //Figure out why the current user doesn't load on mount\n    //Add functionality to determine if user or folder should be created\n\n    componentDidMount() {\n        // this.props.findCurrentUser();\n        console.log(this.props.user.id);\n        // this.props.findNotesForUser(this.props.user.id);\n        console.log(this.props.findNotesForUser(this.initialState.user.id));\n        // this.props.findNotesForUser(102);\n        console.log(this.props.user);\n        // console.log(this.props.notes);\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.props.user !== prevState.user){\n            // console.log(this.props.user);\n            // console.log(this.props.notes);\n            this.setState({\n                user: this.props.user\n            });\n            // this.props.findNotesForUser(this.props.user.id);\n        }\n    }\n\n    createUserNote= (note) => {\n        this.props.createNoteForUser(this.props.user.id, note)\n    };\n\n    //TODO:\n    //Figure out how to access folder id\n    //Below information is a placeholder and not accurate\n    createFolderNote= (note) => {\n        const folderId = this.props.folder.id;\n        this.props.createNoteForFolder(folderId, note)\n    };\n\n    deleteNote = (id) => {\n        this.props.deleteNote(id)\n    };\n\n    render() {\n        return (\n            <ul className=\"list-group\">\n                <li className=\"list-group-item\">\n                    <NewNoteComponent\n                        createUserNote={this.createUserNote}\n                        createFolderNote={this.createFolderNote}\n                    />\n                </li>\n                <br/>\n                {this.props.notes && this.props.notes.map(note =>\n                    <div key={note.id}>\n                        <NoteComponent\n                            deleteNote={this.deleteNote}\n                            note={note}\n                        />\n                        <br/>\n                    </div>\n                )}\n            </ul>\n        )\n    }\n}\n\nconst stateToPropertyMapper = (state) => ({\n    user: state.user.user,\n    notes: state.notes.notes\n});\nconst dispatchToPropertyMapper = (dispatch) => ({\n    findCurrentUser: () => {\n        UserService.findCurrentUser().then(user => {\n            dispatch(findCurrentUser(user))\n        })\n    },\n    findNotesForUser: (userId) => {\n        NoteService.findNotesForUser(userId).then(notes => {\n            dispatch(findNotesForGroup(notes))\n        })\n    },\n    createNoteForUser: (userId, note) => {\n        NoteService.createNoteForUser(userId,note).then(note => {\n            dispatch(createNote(note))\n        })\n    },\n    findNotesForFolder: (folderId) => {\n        NoteService.findNotesForFolder(folderId).then(notes => {\n            dispatch(findNotesForGroup(notes))\n        })\n    },\n    createNoteForFolder: (folderId, note) => {\n        NoteService.createNoteForFolder(folderId,note).then(note => {\n            dispatch(createNote(note))\n        })\n    },\n    deleteNote: (noteId) => {\n        NoteService.deleteNote(noteId).then(status => {\n            dispatch(deleteNote(noteId))\n        })\n    }\n});\nexport default connect(\n    stateToPropertyMapper,\n    dispatchToPropertyMapper\n)(NoteListComponent)\n"]},"metadata":{},"sourceType":"module"}