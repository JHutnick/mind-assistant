{"ast":null,"code":"var _jsxFileName = \"/Users/jhutnick/Documents/github/mind-assistant/src/components/folder/FolderListComponent.js\";\nimport React from 'react';\nimport '../../App.css';\nimport { connect } from \"react-redux\";\nimport userService from \"../../services/userService\";\nimport { findCurrentUser } from \"../../actions/userActions\";\nimport folderService from \"../../services/folderService\";\nimport FolderComponent from \"./FolderComponent\";\nimport { findFoldersForUser } from \"../../actions/folderActions\";\nconst UserService = new userService();\nconst FolderService = new folderService();\n\nclass FolderListComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.createFolder = () => {\n      this.state.folder.id = new Date().getTime();\n      this.setState({\n        folders: [this.state.folder, ...this.state.folders]\n      });\n    };\n\n    this.titleChanged = event => {\n      this.setState({\n        folder: {\n          title: event.target.value\n        }\n      });\n    };\n\n    this.deleteFolder = id => {\n      this.setState({\n        folders: this.state.folders.filter(folder => folder.id !== id)\n      });\n    };\n\n    this.state = {\n      folder: {\n        id: -1,\n        title: 'New Folder'\n      },\n      folders: [{\n        id: 123,\n        title: \"Folder 1\"\n      }, {\n        id: 124,\n        title: \"Folder 2\"\n      }, {\n        id: 125,\n        title: \"Folder 3\"\n      }]\n    };\n  }\n\n  componentDidMount() {\n    this.props.findCurrentUser();\n    this.props.findFoldersForUser(this.props.user.id);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: this.titleChanged,\n      className: \"form-control\",\n      placeholder: \"New Folder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.createFolder,\n      className: \"btn btn-primary btn-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Add Folder\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, this.props.folders && this.props.folders.map(folder => React.createElement(\"div\", {\n      key: folder.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(FolderComponent, {\n      folder: folder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nconst stateToPropertyMapper = state => ({\n  user: state.user.user,\n  folders: state.folders.folders\n});\n\nconst dispatchToPropertyMapper = dispatch => ({\n  findCurrentUser: () => {\n    UserService.findCurrentUser().then(user => {\n      dispatch(findCurrentUser(user));\n    });\n  },\n  findFoldersForUser: userId => {\n    FolderService.findFoldersForUser(userId).then(folders => {\n      dispatch(findFoldersForUser(folders));\n    });\n  }\n});\n\nexport default connect(stateToPropertyMapper, dispatchToPropertyMapper)(FolderListComponent);","map":{"version":3,"sources":["/Users/jhutnick/Documents/github/mind-assistant/src/components/folder/FolderListComponent.js"],"names":["React","connect","userService","findCurrentUser","folderService","FolderComponent","findFoldersForUser","UserService","FolderService","FolderListComponent","Component","constructor","props","createFolder","state","folder","id","Date","getTime","setState","folders","titleChanged","event","title","target","value","deleteFolder","filter","componentDidMount","user","render","map","stateToPropertyMapper","dispatchToPropertyMapper","dispatch","then","userId"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../App.css';\nimport {connect} from \"react-redux\";\nimport userService from \"../../services/userService\";\nimport {findCurrentUser} from \"../../actions/userActions\";\nimport folderService from \"../../services/folderService\";\nimport FolderComponent from \"./FolderComponent\";\nimport {findFoldersForUser} from \"../../actions/folderActions\";\n\nconst UserService = new userService();\nconst FolderService = new folderService();\n\nclass FolderListComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n            folder: {\n                id: -1,\n                title: 'New Folder'\n            },\n\n            folders: [\n                {id: 123, title: \"Folder 1\"},\n                {id: 124, title: \"Folder 2\"},\n                {id: 125, title: \"Folder 3\"}\n            ]\n        }\n\n    }\n\n    componentDidMount() {\n        this.props.findCurrentUser();\n        this.props.findFoldersForUser(this.props.user.id);\n    }\n\n    createFolder = () => {\n        this.state.folder.id = (new Date()).getTime();\n        this.setState({\n                          folders: [this.state.folder, ...this.state.folders]\n                      })\n    };\n\n    titleChanged = (event) => {\n        this.setState({\n                          folder: {\n                              title: event.target.value\n                          }\n                      })\n    };\n\n    deleteFolder = (id) => {\n        this.setState({\n            folders: this.state.folders.filter(folder => folder.id !== id)\n        })\n    };\n\n    render() {\n        return (\n            <div className={\"container\"}>\n                <div className={\"row\"}>\n                    <input\n                        onChange={this.titleChanged}\n                        className=\"form-control\"\n                        placeholder={\"New Folder\"}\n                    />\n                </div>\n                <div className={\"row\"}>\n                    <button onClick={this.createFolder} className=\"btn btn-primary btn-block\">\n                        Add Folder\n                    </button>\n                </div>\n                <br/>\n                <div className={\"row\"}>\n                    {this.props.folders && this.props.folders.map(folder =>\n                        <div key={folder.id}>\n                            <FolderComponent\n                                folder={folder}\n                            />\n                        </div>\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n\nconst stateToPropertyMapper = (state) => ({\n    user: state.user.user,\n    folders: state.folders.folders\n});\nconst dispatchToPropertyMapper = (dispatch) => ({\n    findCurrentUser: () => {\n        UserService.findCurrentUser().then(user => {\n            dispatch(findCurrentUser(user))\n        })\n    },\n    findFoldersForUser: (userId) => {\n        FolderService.findFoldersForUser(userId).then(folders => {\n            dispatch(findFoldersForUser(folders))\n        })\n    }\n});\nexport default connect(\n    stateToPropertyMapper,\n    dispatchToPropertyMapper\n)(FolderListComponent)"]},"metadata":{},"sourceType":"module"}