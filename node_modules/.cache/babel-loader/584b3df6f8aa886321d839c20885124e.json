{"ast":null,"code":"var _jsxFileName = \"/home/davischandram/webdev/cs5610/mind-assistant/src/components/note/NoteListComponent.js\";\nimport React from 'react';\nimport NoteComponent from './NoteComponent';\nimport '../../App.css';\nimport { findCurrentUser } from \"../../actions/userActions\";\nimport { createNote, deleteNote, findNotesForGroup } from \"../../actions/noteActions\";\nimport { connect } from \"react-redux\";\nimport userService from \"../../services/userService\";\nimport noteService from \"../../services/noteService\";\nconst UserService = new userService();\nconst NoteService = new noteService();\n\nclass NoteListComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      newTitle: \"New Note\",\n      newText: \"Note Body\"\n    };\n\n    this.titleChanged = e => {\n      this.setState({\n        newTitle: e.target.value\n      });\n    };\n\n    this.textChanged = e => {\n      this.setState({\n        newText: e.target.value\n      });\n    };\n\n    this.createUserNote = () => {\n      const note = {\n        title: this.state.newTitle,\n        text: this.state.newText\n      };\n      this.props.createNoteForUser(this.props.user.id, note);\n    };\n\n    this.createFolderNote = () => {\n      const note = {\n        title: this.state.newTitle,\n        text: this.state.newText\n      };\n      const folderId = this.props.folder.id;\n      this.props.createNoteForFolder(folderId, note);\n    };\n\n    this.deleteNote = id => {\n      this.props.deleteNote(id);\n    };\n  }\n\n  //TODO:\n  //Figure out why the current user doesn't load on mount\n  //Add functionality to determine if user or folder should be created\n  componentDidMount() {\n    this.props.findCurrentUser(); // this.props.findNotesForUser(this.props.user.id);\n\n    this.props.findNotesForUser(102); // console.log(this.props.user);\n    // console.log(this.props.notes);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.user !== prevState.user) {\n      // console.log(this.props.user);\n      // console.log(this.props.notes);\n      this.setState({\n        user: this.props.user\n      });\n      this.props.findNotesForUser(this.props.user.id);\n    }\n  }\n\n  render() {\n    return React.createElement(\"ul\", {\n      className: \"list-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      className: \"list-group-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: this.createUserNote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Add Note\")), this.props.notes.map(note => React.createElement(\"div\", {\n      key: note.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(NoteComponent, {\n      deleteNote: this.deleteNote,\n      titleChange: this.titleChanged,\n      textChange: this.textChanged,\n      note: note,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst stateToPropertyMapper = state => ({\n  user: state.user.user,\n  notes: state.notes.notes\n});\n\nconst dispatchToPropertyMapper = dispatch => ({\n  findCurrentUser: () => {\n    UserService.findCurrentUser().then(user => {\n      dispatch(findCurrentUser(user));\n    });\n  },\n  findNotesForUser: userId => {\n    NoteService.findNotesForUser(userId).then(notes => {\n      dispatch(findNotesForGroup(notes));\n    });\n  },\n  createNoteForUser: (userId, note) => {\n    NoteService.createNoteForUser(userId, note).then(note => {\n      dispatch(createNote(note));\n    });\n  },\n  findNotesForFolder: folderId => {\n    NoteService.findNotesForFolder(folderId).then(notes => {\n      dispatch(findNotesForGroup(notes));\n    });\n  },\n  createNoteForFolder: (folderId, note) => {\n    NoteService.createNoteForFolder(folderId, note).then(note => {\n      dispatch(createNote(note));\n    });\n  },\n  deleteNote: noteId => {\n    NoteService.deleteNote(noteId).then(status => {\n      dispatch(deleteNote(noteId));\n    });\n  }\n});\n\nexport default connect(stateToPropertyMapper, dispatchToPropertyMapper)(NoteListComponent);","map":{"version":3,"sources":["/home/davischandram/webdev/cs5610/mind-assistant/src/components/note/NoteListComponent.js"],"names":["React","NoteComponent","findCurrentUser","createNote","deleteNote","findNotesForGroup","connect","userService","noteService","UserService","NoteService","NoteListComponent","Component","state","newTitle","newText","titleChanged","e","setState","target","value","textChanged","createUserNote","note","title","text","props","createNoteForUser","user","id","createFolderNote","folderId","folder","createNoteForFolder","componentDidMount","findNotesForUser","componentDidUpdate","prevProps","prevState","snapshot","render","notes","map","stateToPropertyMapper","dispatchToPropertyMapper","dispatch","then","userId","findNotesForFolder","noteId","status"],"mappings":"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","sourcesContent":["import React from 'react';\nimport NoteComponent from './NoteComponent';\nimport '../../App.css';\nimport {findCurrentUser} from \"../../actions/userActions\";\nimport {createNote, deleteNote, findNotesForGroup} from \"../../actions/noteActions\";\nimport {connect} from \"react-redux\";\nimport userService from \"../../services/userService\";\nimport noteService from \"../../services/noteService\";\n\nconst UserService = new userService();\nconst NoteService = new noteService();\n\nclass NoteListComponent extends React.Component {\n    state = {\n        newTitle: \"New Note\",\n        newText: \"Note Body\"\n    };\n\n    //TODO:\n    //Figure out why the current user doesn't load on mount\n    //Add functionality to determine if user or folder should be created\n\n    componentDidMount() {\n        this.props.findCurrentUser();\n        // this.props.findNotesForUser(this.props.user.id);\n        this.props.findNotesForUser(102);\n        // console.log(this.props.user);\n        // console.log(this.props.notes);\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.props.user !== prevState.user){\n            // console.log(this.props.user);\n            // console.log(this.props.notes);\n            this.setState({\n                user: this.props.user\n            });\n            this.props.findNotesForUser(this.props.user.id);\n        }\n    }\n\n    titleChanged = (e) => {\n        this.setState({\n            newTitle: e.target.value\n        })\n    };\n\n    textChanged = (e) => {\n        this.setState({\n            newText: e.target.value\n        })\n    };\n\n    createUserNote= () => {\n        const note = {\n            title: this.state.newTitle,\n            text: this.state.newText\n        };\n        this.props.createNoteForUser(this.props.user.id, note)\n    };\n\n    //TODO:\n    //Figure out how to access folder id\n    //Below information is a placeholder and not accurate\n    createFolderNote= () => {\n        const note = {\n            title: this.state.newTitle,\n            text: this.state.newText\n        };\n        const folderId = this.props.folder.id;\n        this.props.createNoteForFolder(folderId, note)\n    };\n\n    deleteNote = (id) => {\n        this.props.deleteNote(id)\n    };\n\n    render() {\n        return (\n            <ul className=\"list-group\">\n                <li className=\"list-group-item\">\n                    <button className=\"btn btn-primary\"\n                            onClick={this.createUserNote}\n                    >\n                        Add Note\n                    </button>\n                </li>\n                {this.props.notes.map(note =>\n                    <div key={note.id}>\n                        <NoteComponent\n                            deleteNote={this.deleteNote}\n                            titleChange={this.titleChanged}\n                            textChange={this.textChanged}\n                            note={note}\n                        />\n                    </div>\n                )}\n            </ul>\n        )\n    }\n}\n\nconst stateToPropertyMapper = (state) => ({\n    user: state.user.user,\n    notes: state.notes.notes\n});\nconst dispatchToPropertyMapper = (dispatch) => ({\n    findCurrentUser: () => {\n        UserService.findCurrentUser().then(user => {\n            dispatch(findCurrentUser(user))\n        })\n    },\n    findNotesForUser: (userId) => {\n        NoteService.findNotesForUser(userId).then(notes => {\n            dispatch(findNotesForGroup(notes))\n        })\n    },\n    createNoteForUser: (userId, note) => {\n        NoteService.createNoteForUser(userId,note).then(note => {\n            dispatch(createNote(note))\n        })\n    },\n    findNotesForFolder: (folderId) => {\n        NoteService.findNotesForFolder(folderId).then(notes => {\n            dispatch(findNotesForGroup(notes))\n        })\n    },\n    createNoteForFolder: (folderId, note) => {\n        NoteService.createNoteForFolder(folderId,note).then(note => {\n            dispatch(createNote(note))\n        })\n    },\n    deleteNote: (noteId) => {\n        NoteService.deleteNote(noteId).then(status => {\n            dispatch(deleteNote(noteId))\n        })\n    }\n});\nexport default connect(\n    stateToPropertyMapper,\n    dispatchToPropertyMapper\n)(NoteListComponent)"]},"metadata":{},"sourceType":"module"}